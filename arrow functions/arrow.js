/*
# **Arrow Functions üèπ**

Vamos se aprofundar sobre Arrow Functions em JavaScript. Esse √© um t√≥pico super legal
 e importante porque as Arrow Functions n√£o s√≥ simplificam a sintaxe,
 mas tamb√©m t√™m algumas peculiaridades que voc√™ precisa entender. Vamos l√°! üöÄ

 ## **Introdu√ß√£o √†s Arrow Functions**

Arrow Functions, introduzidas no ES6, s√£o uma forma mais curta de escrever fun√ß√µes em JavaScript.
 Elas s√£o especialmente √∫teis para fun√ß√µes an√¥nimas e t√™m uma sintaxe mais enxuta.
*/

let somar = (a, b) => a + b;
console.log(somar(5, 3)); // Sa√≠da: 8

/*
Aqui, **`somar`** √© uma Arrow Function que recebe dois par√¢metros
 **`a`** e **`b`** e retorna a soma deles. Note que n√£o usamos a palavra-chave **`function`** e o retorno √© impl√≠cito.

### **Fun√ß√µes Sem Par√¢metros**
*/


let saudacao = () => console.log("Ol√°, Mundo!");
saudacao(); // Sa√≠da: Ol√°, Mundo!

/*
Fun√ß√µes com Corpo de Bloco
*/

let multiplicar = (a, b) => {
    let resultado = a * b;
    return resultado;
};

console.log(multiplicar(4, 5)); // sa√≠da: 20;


/*
## **Caracter√≠sticas Importantes das Arrow Functions**

Arrow Functions n√£o s√£o apenas uma sintaxe mais curta.
 Elas t√™m caracter√≠sticas √∫nicas que as diferenciam das fun√ß√µes tradicionais.

### **`this` nas Arrow Functions**
*/

function pessoa() {
    this.idade = 0

    setInterval(()=> {
        this.idade++;
        console.log(this.idade);
    }, 1000)
}

new pessoa()

setTimeout(() => console.log("Ol√° depois de 1 segundo"), 1000);

