/*
# **Estrutura de Dados Map**

Map √© uma daquelas ferramentas que podem fazer a diferen√ßa entre um c√≥digo ok e um c√≥digo top! Ent√£o,
se liga nesse t√≥pico e bora aprender! üöÄ

## **O que √© um Map? ü§î**

Map √© uma cole√ß√£o de pares chave-valor. Diferente dos objetos, no Map, as chaves podem ser de qualquer tipo
- at√© objetos ou fun√ß√µes! Al√©m disso, ele mant√©m a
ordem de inser√ß√£o, o que pode ser mega √∫til em algumas situa√ß√µes.
*/

let meuMap = new Map()


meuMap.set('chave1', 'valor1');
meuMap.set('chave2', 'valor2');


/*
## **Acessando Elementos üîç**

Agora, vamos ver como pegar valores de volta do nosso Map.

### **Exemplo de Acesso**
*/

console.log(meuMap.get('chave1'));


/*
## **Iterando sobre um Map üîÑ**

Maps s√£o iter√°veis, ent√£o podemos percorrer eles de v√°rias maneiras.

### **Exemplo de Itera√ß√£o**
*/

for (let [chave, valor] of meuMap) {
    console.log(`${chave}: ${valor}`)
}

console.log(meuMap.size);
meuMap.delete('chave2');
console.log(meuMap.has('chave2'))

/*
- **`size`** nos mostra quantos pares chave-valor temos no Map.
- **`delete`** remove um par baseado na chave.
- **`has`** verifica se uma chave espec√≠fica existe no Map.
*/

/*
## **Quando Usar um Map? üßê**

Map √© perfeito quando voc√™ precisa de uma cole√ß√£o de pares chave-valor,
onde as chaves s√£o √∫nicas e podem ser de qualquer tipo. √â uma escolha melhor que
objetos quando as chaves s√£o desconhecidas at√© o tempo de execu√ß√£o,
ou quando todas as chaves s√£o do mesmo tipo e os valores tamb√©m.
*/

/*
## **Convertendo Map para Objetos e Arrays ‚ÜîÔ∏è**

√Äs vezes, voc√™ pode querer converter seu Map em um objeto ou array.
*/

let mapParaObjeto = Object.fromEntries(meuMap)
console.log(mapParaObjeto)

let chavesArray = [...meuMap.keys()];
console.log(chavesArray);

/*
Object.fromEntries transforma o Map em um objeto.
Usando spread (...), pegamos todas as chaves ou valores do Map e colocamos em um array.
*/


/*
## Exerc√≠cios para Praticar:

1. **Criar e Adicionar Pares Chave-Valor no Map**:
Crie um **`Map`** chamado **`livros`** e adicione nele tr√™s pares de chave-valor, onde a chave √©
 o t√≠tulo do livro e o valor √© o autor.
2. **Acessar Valor no Map**:
Acesse o valor associado a uma das chaves no **`Map`** **`livros`** que voc√™ criou e imprima o nome do autor.
3. **Iterar Sobre um Map**:
Use um loop **`for...of`** para iterar sobre o **`Map`** **`livros`** e imprimir todos os pares chave-valor.
4. **Usando M√©todos do Map: size, delete, has**:
No seu **`Map`** **`livros`**, use o m√©todo **`size`**
 para imprimir o n√∫mero de livros, delete para remover um livro pelo t√≠tulo e **`has`** para verificar
  se um livro ainda est√° no **`Map`**.
5. **Map com Tipos de Chaves Diferentes**:
Crie um **`Map`** chamado **`colecao`** que cont√©m diferentes tipos de chaves (como **`string`**, **`number`**,
 **`object`**)
 e seus respectivos valores.
*/

let livros = new Map()

livros.set('Harry potter', 'J.K Rowling');
livros.set('Game Of Thrones', 'George R.R Martin');
livros.set('Assasinato no Expresso Oriente', 'Agatha Cristhie');

console.log(livros.get('Game Of Thrones'));

for (let [livro, autor] of livros) {
    console.log(`${livro}: ${autor}`)
}


console.log(livros.size);
meuMap.delete('Game Of Thrones');
console.log(meuMap.has('Game Of Thrones'));


const colecao = new Map();

// Chave do tipo string
colecao.set("nome", "Alice");

// Chave do tipo number
colecao.set(42, "A resposta para tudo");

// Chave do tipo objeto
const objChave = { id: 1 };
colecao.set(objChave, "Objeto como chave");

// Chave do tipo fun√ß√£o
const funcChave = function() {};
colecao.set(funcChave, "Fun√ß√£o como chave");

// Exibindo todos os valores do Map
for (let [chave, valor] of colecao) {
  console.log("Chave:", chave, "| Valor:", valor);
}
